trigger:
  batch: true
  branches:
    include:
      - '*'
  paths:
    exclude:
      - 'docs/*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: goVersion
    value: '1.13'
  - name: goBuiltAppName
    value: 'main'
  - name: nodejsVersion
    value: '13.x'
  - name: dockerVersion
    value: '19.03.9'
  - name: herokuRegistry
    value: 'registry.heroku.com'
  - name: herokuApp
    value: 'exteross'
  - name: branchMainChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - name: branchHerokuChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/heroku-build') }}
  - name: branchDockerHubChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/dockerhub-build') }}
  - name: branchoktetoChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/okteto-build') }}
  - name: branchIdBtnguyen2kChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/id.btnguyen2k-build') }}
  - name: goTestPath
    value: './src/gvabe/bo/product ./src/gvabe/bo/doc ./src/gvabe/bo/user'
  - group: Release

stages:
  - stage: build
    displayName: Build project
    jobs:
      - job: build
        displayName: Build project
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: NodeTool@0
          displayName: Prepare NodeJs env
          inputs:
            versionSpec: '$(nodejsVersion)'
        - task: Npm@1
          displayName: 'FE: npm install'
          inputs:
            command: install
            workingDir: '$(System.DefaultWorkingDirectory)/fe-admin'
        - task: Npm@1
          displayName: 'FE: npm run build'
          inputs:
            command: custom
            customCommand: 'run build'
            workingDir: '$(System.DefaultWorkingDirectory)/fe-admin'
        - script: cd $(System.DefaultWorkingDirectory)/be-api && go build -o $(goBuiltAppName) -tags netgo -a
          displayName: 'BE: go build'

  - stage: test
    displayName: Run tests
    dependsOn: build
    jobs:
      - job: test_aws_dynamodb
        displayName: Run tests against AWS DynamoDB
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - script: |
            docker run -d --rm --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -inMemory -sharedDb
            sleep 5
            export AWS_REGION="us-west-2"
            export AWS_ACCESS_KEY_ID="DUMMY"
            export AWS_SECRET_ACCESS_KEY="DUMMY"
            export AWS_DYNAMODB_ENDPOINT="http://localhost:8000"
            cd $(System.DefaultWorkingDirectory)/be-api \
              && go test -p 1 -cover -coverprofile=coverage_dynamodb.txt -v -count 1 $(goTestPath) \
              && bash <(curl -s https://codecov.io/bash) -cF dynamodb
          displayName: 'BE: Run tests against AWS DynamoDB'
      - job: test_azure_cosmosdb
        displayName: Run tests against Azure Cosmos DB
        pool:
          #vmImage: 'vs2017-win2016'
          vmImage: 'windows-latest'
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - script: |
            echo "Azure CosmosDb Emulator shoud have been installed at C:\Program Files\Azure Cosmos DB Emulator\"
            echo choco install -y azure-cosmosdb-emulator
            powershell "& \"C:\Program Files\Azure Cosmos DB Emulator\Microsoft.Azure.Cosmos.Emulator.exe\""
            choco install codecov
            powershell -command start-Sleep -s 75
            powershell try { Invoke-RestMethod -Method GET https://127.0.0.1:8081/ } catch {}
            powershell netstat -nt
            echo $env:COSMOSDB_DRIVER='gocosmos'
            echo $env:COSMOSDB_URL='AccountEndpoint=https://127.0.0.1:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=='
            echo $env:TIMEZONE='Asia/Ho_Chi_Minh'
            set COSMOSDB_DRIVER='gocosmos'
            set COSMOSDB_URL='AccountEndpoint=https://127.0.0.1:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=='
            set TIMEZONE='Asia/Ho_Chi_Minh'
            cd $(System.DefaultWorkingDirectory)/be-api
            go test -p 1 -cover -coverprofile=coverage_cosmosdb.txt -v -count 1 $(goTestPath)
            codecov -cF cosmosdb
          displayName: 'BE: Run tests against Azure Cosmos DB'
      - job: test_pgsql
        displayName: Run tests against PostgreSQL
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - script: |
            docker run -d --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:11
            sleep 5
            export PGSQL_DRIVER="pgx"
            export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=prom"
            cd $(System.DefaultWorkingDirectory)/be-api \
              && go test -cover -coverprofile=coverage_pgsql.txt -v -count 1 $(goTestPath) \
              && bash <(curl -s https://codecov.io/bash) -cF pgsql
          displayName: 'BE: Run tests against PostgreSQL'
      - job: test_mysql
        displayName: Run tests against MySQL
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - script: |
            docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:8
            sleep 5
            export MYSQL_DRIVER="mysql"
            export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
            cd $(System.DefaultWorkingDirectory)/be-api \
              && go test -cover -coverprofile=coverage_mysql.txt -v -count 1 $(goTestPath) \
              && bash <(curl -s https://codecov.io/bash) -cF mysql
          displayName: 'BE: Run tests against MySQL'
      - job: test_sqlite
        displayName: Run tests against SQLite
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - script: |
            export PWD=$(pwd)
            mkdir $PWD/temp
            export SQLITE_DRIVER="sqlite3"
            export SQLITE_URL="$PWD/temp/temp.db"
            cd $(System.DefaultWorkingDirectory)/be-api \
              && go test -cover -coverprofile=coverage_sqlite.txt -v -count 1 $(goTestPath) \
              && bash <(curl -s https://codecov.io/bash) -cF sqlite
          displayName: 'BE: Run tests against SQLite'
      - job: test_mongodb_standalone
        displayName: Run tests against MongoDB (Standalone)
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - script: |
            docker run -d --name mongodb -e MONGO_INITDB_ROOT_USERNAME=test -e MONGO_INITDB_ROOT_PASSWORD=test -e MONGO_INITDB_DATABASE=test -p 27017:27017 mongo:4.2
            sleep 5
            export MONGO_DB="test"
            export MONGO_URL="mongodb://test:test@localhost:27017/?authSource=admin"
            cd $(System.DefaultWorkingDirectory)/be-api \
              && go test -cover -coverprofile=coverage_mongodb_standalone.txt -v -count 1 $(goTestPath) \
              && bash <(curl -s https://codecov.io/bash) -cF mongodb_standalone
          displayName: 'BE: Run tests against MongoDB (Standalone)'
      - job: test_mongodb_replicaset
        displayName: Run tests against MongoDB (ReplicaSet)
        steps:
        - task: GoTool@0
          displayName: Prepare Go env
          inputs:
            version: '$(goVersion)'
        - task: DockerInstaller@0
          displayName: Prepare Docker CLI
          inputs:
            dockerVersion: '$(dockerVersion)'
            releaseType: 'stable'
        - script: |
            docker run -d --name mongodb-replset -e MONGODB_REPLICA_SET_MODE=primary -e MONGODB_REPLICA_SET_KEY=myreplset -e MONGODB_ADVERTISED_HOSTNAME=localhost -e MONGODB_PRIMARY_PORT_NUMBER=27017 -e MONGODB_ROOT_PASSWORD=test -e MONGODB_DATABASE=test -p 27017:27017 bitnami/mongodb:4.2
            sleep 5
            export MONGO_DB="test"
            export MONGO_URL="mongodb://root:test@localhost:27017/admin?replicaSet=replicaset&w=majority&retryWrites=true"
            cd $(System.DefaultWorkingDirectory)/be-api \
              && go test -cover -coverprofile=coverage_mongodb_replicaset.txt -v -count 1 $(goTestPath) \
              && bash <(curl -s https://codecov.io/bash) -cF mongodb_replicaset
          displayName: 'BE: Run tests against MongoDB (ReplicaSet)'
