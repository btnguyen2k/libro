api {
  ## API HTTP endpoints
  http {
    ## Endpoint format: {url={http-method=handler-name}}
    endpoints {
      # public APIs
      "/info" {
        get = "info"
      }
      "/api/login" {
        post = "login"
      }
      "/api/verifyLoginToken" {
        post = "verifyLoginToken"
      }
      "/api/systemInfo" {
        get = "systemInfo"
      }

      # frontend APIs
      "/api/product/:domain" {
        get = "feGetProduct"
      }
      "/api/topic/:domain/:tid" {
        get = "feGetTopic"
      }
      "/api/user/:uid" {
        get = "feGetUserProfile"
        put = "adminUpdateMyProfile"
      }
      "/api/userPassword/:uid" {
        put = "adminUpdateMyPassword"
      }

      # admin APIs
      "/api/admin/stats" {
        get = "adminGetStats"
      }
      "/api/admin/products" {
        get = "adminGetProductList"
        post = "adminAddProduct"
      }
      "/api/admin/product/:id" {
        get = "adminGetProduct"
        put = "adminUpdateProduct"
        delete = "adminDeleteProduct"
      }
      "/api/admin/domains" {
        post = "adminMapDomain"
      }
      "/api/admin/domain/:domain/:pid" {
        delete = "adminUnmapDomain"
      }
      "/api/admin/product/:pid/topics" {
        get = "adminGetProductTopics"
        post = "adminAddProductTopic"
      }
      "/api/admin/product/:pid/topic/:id" {
        get = "adminGetProductTopic"
        patch = "adminModifyProductTopic"
        put = "adminUpdateProductTopic"
        delete = "adminDeleteProductTopic"
      }
      "/api/admin/topic/:tid/pages" {
        get = "adminGetTopicPages"
        post = "adminAddTopicPage"
      }
      "/api/admin/topic/:tid/page/:id" {
        get = "adminGetTopicPage"
        patch = "adminModifyTopicPage"
        put = "adminUpdateTopicPage"
        delete = "adminDeleteTopicPage"
      }
      "/api/admin/users" {
        get = "adminGetUserList"
        post = "adminAddUser"
      }
      "/api/admin/user/:uid" {
        put = "adminUpdateUserProfile"
        delete = "adminDeleteUserProfile"
      }
    }
  }
}

gvabe {
  ## Initializing data
  init {
    ## Id/password and display name of the admin user to be automatically created in the system.
    # override these settings with env INIT_ADMIN_USER_ID/INIT_ADMIN_USER_PWD/INIT_ADMIN_USER_NAME
    admin_user_id = "admin@local"
    admin_user_id = ${?INIT_ADMIN_USER_ID}
    admin_user_pwd = "s3cr3t"
    admin_user_pwd = ${?INIT_ADMIN_USER_PWD}
    admin_user_name = "Administrator"
    admin_user_name = ${?INIT_ADMIN_USER_NAME}
  }

  ## Exter configuration
  exter {
    ## client app id registered with Exter
    # override this setting with env EXTER_APP_ID
    app_id = "libro_demo_local"
    app_id = ${?EXTER_APP_ID}

    ## Exter's base url (without trailing slash)
    # override this setting with env EXTER_BASE_URL
    base_url = "https://exteross.gpvcloud.com"
    base_url = ${?EXTER_BASE_URL}
  }

  ## Key configurations
  keys {
    ## path to RSA private key (PEM format)
    # override this setting with env RSA_PRIVKEY_FILE
    rsa_privkey_file = "./config/keys/libro_priv.pem"
    rsa_privkey_file = ${?RSA_PRIVKEY_FILE}

    ## pass phrase for RSA private key
    rsa_privkey_passphrase = "gvas3cr3t"
    # override this setting with env RSA_PRIVKEY_PASSPHRASE
    rsa_privkey_passphrase = ${?RSA_PRIVKEY_PASSPHRASE}
  }

  db {
    ## TODO curently Libro supports MongoDB only!

    # Support db types: sqlite, mysql, pgsql, cosmosdb, dynamodb, mongodb
    # override this setting with env DB_TYPE
    type = "sqlite"
    type = ${?DB_TYPE}

    ## SQLite configurations (for non-production only)
    # directory: directory to store SQLite data
    # dbname: SQLite database name
    # note: use driver github.com/mattn/go-sqlite3
    sqlite {
      directory = "./data/sqlite"
      dbname = "gvabe"
    }
    ## MySQL configurations
    # note: use driver "github.com/go-sql-driver/mysql"
    mysql {
      # override this setting with env DB_MYSQL_URL
      url = "test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false"
      url = ${?DB_MYSQL_URL}
    }
    ## PostgreSQL configurations
    # note: use driver github.com/jackc/pgx/v4/stdlib
    pgsql {
      # override this setting with env DB_PGSQL_URL
      url = "postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=libro"
      url = ${?DB_PGSQL_URL}
    }

    ## Azure Cosmos DB configurations
    # note: use driver github.com/btnguyen2k/gocosmos
    cosmosdb {
      # override these settings with env DB_COSMOSDB_URL
      url = "AccountEndpoint=https://localhost:8081/;AccountKey=CosmosDb-account-key;Db=db-name"
      url = ${?DB_COSMOSDB_URL}
    }

    ## AWS DynamoDB configurations
    # AWS AccessKeyId and SecretAccessKey are provided via env.AWS_ACCESS_KEY_ID and env.AWS_SECRET_ACCESS_KEY
    dynamodb {
      # override these settings with env DB_DYNAMODB_REGION and DB_DYNAMODB_ENDPOINT
      region = "ap-southeast-1"
      endpoint = "http://localhost:8000"
      region = ${?DB_DYNAMODB_REGION}
      endpoint = ${?DB_DYNAMODB_ENDPOINT}
    }

    ## MongoDB configurations
    # db: name of MongoDB database to store data
    mongodb {
      # override these settings with env DB_MONGODB_DB and DB_MONGODB_URL
      db = "test"
      url = "mongodb://root:test@localhost:27017/admin?replicaSet=replicaset&w=majority&retryWrites=true"
      db = ${?DB_MONGODB_DB}
      url = ${?DB_MONGODB_URL}
    }
  }
}
